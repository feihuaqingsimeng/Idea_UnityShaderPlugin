/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.teng.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import static com.teng.psi.ShaderTypes.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Shader.flex</tt>
 */
public class ShaderLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14960 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\23\24\1\30\1\43\3\24\1\25\1\44\1\43\4\24\1\45\1\46\4\0\1\47\1\50\1\30"+
    "\3\24\2\51\1\30\1\52\1\53\1\0\1\54\5\24\1\55\3\0\1\56\1\57\13\24\1\60\1\47"+
    "\1\61\1\62\1\0\1\63\1\30\1\64\1\65\3\24\3\0\1\66\12\24\1\67\1\0\1\70\1\30"+
    "\1\0\1\71\3\24\1\55\1\72\1\23\2\24\1\67\1\73\1\74\1\75\2\30\3\24\1\76\10\30"+
    "\1\77\1\31\6\30\1\100\2\0\1\101\1\102\6\24\1\103\2\0\1\104\1\24\1\105\1\0"+
    "\2\43\1\106\1\107\1\110\2\24\1\77\1\111\1\112\1\113\1\114\1\64\1\115\1\105"+
    "\1\0\1\116\1\53\1\106\1\117\1\110\2\24\1\77\1\120\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\1\0\1\127\1\30\1\106\1\40\1\37\2\24\1\77\1\130\1\112\1\47\1\131"+
    "\1\132\1\30\1\105\1\0\1\44\1\30\1\106\1\107\1\110\2\24\1\77\1\130\1\112\1"+
    "\113\1\123\1\126\1\115\1\105\1\0\1\44\1\30\1\133\1\134\1\135\1\136\1\137\1"+
    "\134\1\24\1\140\1\141\1\142\1\143\1\30\1\126\1\0\1\30\1\44\1\106\1\33\1\77"+
    "\2\24\1\77\1\144\1\145\1\146\1\142\1\147\1\27\1\105\1\0\2\30\1\150\1\33\1"+
    "\77\2\24\1\77\1\144\1\112\1\146\1\142\1\147\1\35\1\105\1\0\1\151\1\30\1\150"+
    "\1\33\1\77\4\24\1\152\1\146\1\153\1\64\1\30\1\105\1\0\1\30\1\42\1\150\1\24"+
    "\1\25\1\42\2\24\1\37\1\154\1\25\1\155\1\156\1\0\2\30\1\157\1\30\1\43\5\24"+
    "\1\160\1\161\1\162\1\101\1\0\1\163\4\30\1\164\1\165\1\166\1\43\1\167\1\170"+
    "\1\160\1\171\1\172\1\173\1\0\1\174\4\30\1\132\2\30\1\163\1\0\1\163\1\175\1"+
    "\176\1\24\1\43\3\24\1\31\1\46\1\0\1\146\1\177\1\0\1\46\3\0\1\52\1\200\7\30"+
    "\5\24\1\55\1\0\1\201\1\0\1\163\1\67\1\202\1\203\1\204\1\205\1\24\1\206\1\207"+
    "\1\0\1\173\4\24\1\40\1\22\5\24\1\210\51\24\1\135\1\25\1\135\5\24\1\135\4\24"+
    "\1\135\1\25\1\135\1\24\1\25\7\24\1\135\10\24\1\211\4\30\2\24\2\30\12\24\1"+
    "\31\1\30\1\43\114\24\1\107\2\24\1\212\2\24\1\51\11\24\1\134\1\132\1\30\1\24"+
    "\1\33\1\213\1\30\2\24\1\213\1\30\2\24\1\214\1\30\1\24\1\33\1\215\1\30\6\24"+
    "\1\216\3\0\1\217\1\220\1\0\1\163\3\30\1\221\1\0\1\163\13\24\1\30\5\24\1\222"+
    "\10\24\1\223\1\30\3\24\1\31\1\0\1\2\1\0\1\2\1\126\1\0\3\24\1\223\1\31\1\30"+
    "\5\24\1\116\2\0\1\57\1\163\1\0\1\163\4\30\2\24\1\162\1\2\6\24\1\177\1\101"+
    "\3\0\1\113\1\0\1\163\1\0\1\163\1\45\13\30\1\224\5\24\1\216\1\0\1\224\1\116"+
    "\1\0\1\163\1\30\1\225\1\2\1\30\1\226\3\24\1\104\1\204\1\0\1\71\4\24\1\67\1"+
    "\0\1\2\1\30\4\24\1\216\2\0\1\30\1\0\1\227\1\0\1\71\3\24\1\223\12\30\1\230"+
    "\2\0\1\231\1\232\1\30\30\24\4\0\1\101\2\30\1\100\42\24\2\223\4\24\2\223\1"+
    "\24\1\233\3\24\1\223\6\24\1\33\1\172\1\234\1\31\1\235\1\116\1\24\1\31\1\234"+
    "\1\31\1\236\1\237\3\30\1\240\1\30\1\45\1\132\1\30\1\241\1\242\1\52\1\243\1"+
    "\44\1\45\2\30\1\24\1\31\3\24\1\51\2\30\1\0\1\52\1\244\1\0\1\245\1\30\1\246"+
    "\1\42\1\154\1\247\1\32\1\250\1\24\1\251\1\252\1\253\2\30\5\24\1\132\116\30"+
    "\5\24\1\25\5\24\1\25\20\24\1\31\1\254\1\255\1\30\4\24\1\40\1\22\7\24\1\45"+
    "\1\30\1\64\2\24\1\25\1\30\10\25\4\0\5\30\1\45\72\30\1\256\3\30\1\43\1\206"+
    "\1\247\1\31\1\43\11\24\1\25\1\257\1\43\12\24\1\210\1\252\4\24\1\223\1\43\12"+
    "\24\1\25\2\30\3\24\1\51\6\30\170\24\1\223\11\30\71\24\1\31\6\30\21\24\1\31"+
    "\10\30\5\24\1\223\41\24\1\31\2\24\1\0\1\255\2\30\5\24\1\162\1\100\1\260\3"+
    "\24\1\64\12\24\1\163\3\30\1\45\1\24\1\42\14\24\1\261\1\116\1\30\1\24\1\51"+
    "\11\30\1\24\1\262\1\263\2\24\1\55\2\30\1\132\6\24\1\116\1\30\1\71\5\24\1\216"+
    "\1\0\1\52\1\30\1\0\1\163\2\0\1\71\1\53\1\0\1\71\2\24\1\67\1\173\2\24\1\162"+
    "\1\0\1\2\1\30\3\24\1\31\1\102\5\24\1\55\1\0\1\245\1\45\1\0\1\163\4\30\5\24"+
    "\1\104\1\101\1\30\1\263\1\264\1\0\1\163\2\24\1\25\1\265\6\24\1\203\1\266\1"+
    "\222\2\30\1\267\1\24\1\55\1\270\1\30\3\271\1\30\2\25\22\30\4\24\1\55\1\272"+
    "\1\0\1\163\64\24\1\116\1\30\2\24\1\25\1\273\5\24\1\116\40\30\55\24\1\223\15"+
    "\24\1\27\4\30\1\25\1\30\1\273\1\274\1\24\1\77\1\25\1\172\1\275\15\24\1\27"+
    "\3\30\1\273\54\24\1\223\2\30\10\24\1\42\6\24\5\30\1\24\1\31\2\0\2\30\1\101"+
    "\1\30\1\137\2\30\1\252\3\30\1\44\1\33\20\24\1\276\1\241\1\30\1\0\1\163\1\43"+
    "\2\24\1\117\1\43\2\24\1\51\1\277\12\24\1\25\3\42\1\300\1\301\2\30\1\302\1"+
    "\24\1\144\2\24\1\25\2\24\1\303\1\24\1\223\1\24\1\223\4\30\17\24\1\51\10\30"+
    "\6\24\1\31\20\30\1\304\20\30\3\24\1\31\6\24\1\132\5\30\3\24\1\25\2\30\3\24"+
    "\1\51\6\30\3\24\1\223\4\24\1\116\1\24\1\247\5\30\23\24\1\223\1\0\1\163\52"+
    "\30\1\223\1\77\4\24\1\40\1\305\2\24\1\223\25\30\2\24\1\223\1\30\3\24\1\27"+
    "\10\30\7\24\1\277\10\30\1\306\1\100\1\144\1\43\2\24\1\116\1\122\4\30\3\24"+
    "\1\31\20\30\6\24\1\223\1\30\2\24\1\223\1\30\2\24\1\51\21\30\11\24\1\132\66"+
    "\30\1\226\6\24\1\0\1\101\3\30\1\126\1\0\2\30\1\226\5\24\1\0\1\307\2\30\3\24"+
    "\1\132\1\0\1\163\1\226\3\24\1\162\1\0\1\146\1\0\10\30\1\226\5\24\1\55\1\0"+
    "\1\310\1\30\1\0\1\163\24\30\5\24\1\55\1\0\1\30\1\0\1\163\46\30\55\24\1\25"+
    "\22\30\14\24\1\51\63\30\5\24\1\25\72\30\7\24\1\132\130\30\10\24\1\31\1\30"+
    "\1\104\4\0\1\101\1\30\1\64\1\226\1\24\14\30\1\27\153\30\1\311\1\312\2\0\1"+
    "\313\1\2\3\30\1\314\22\30\1\315\67\30\12\24\1\33\10\24\1\33\1\316\1\317\1"+
    "\24\1\320\1\144\7\24\1\40\1\321\2\33\3\24\1\322\1\172\1\42\1\77\51\24\1\223"+
    "\3\24\1\77\2\24\1\210\3\24\1\210\2\24\1\33\3\24\1\33\2\24\1\25\3\24\1\25\3"+
    "\24\1\77\3\24\1\77\2\24\1\210\1\323\6\0\1\144\3\24\1\164\1\43\1\210\1\324"+
    "\1\246\1\325\1\164\1\233\1\164\2\210\1\125\1\24\1\37\1\24\1\116\1\326\1\37"+
    "\1\24\1\116\50\30\32\24\1\25\5\30\106\24\1\31\1\30\33\24\1\223\74\30\1\124"+
    "\3\30\14\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1720 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\4\1\2\1\1\1\21\1\22\1\1\6\4\4\26\1\2\1\52\1\24\1\66\1\3\1\57\1\30\1\26"+
    "\1\60\1\61\1\20\1\12\1\67\1\56\1\16\1\17\1\14\1\7\1\5\7\7\1\71\1\70\1\55\1"+
    "\53\1\54\2\26\1\104\1\10\1\100\1\6\1\11\1\10\1\101\5\3\1\105\1\106\1\103\1"+
    "\75\1\3\1\102\1\74\1\76\3\3\1\15\2\3\1\62\1\25\1\63\1\72\1\3\1\26\1\34\1\31"+
    "\1\41\1\44\1\33\1\50\1\77\1\46\1\43\1\3\1\35\1\47\1\107\1\40\1\42\1\13\1\3"+
    "\1\32\1\51\1\36\1\37\1\110\1\45\1\15\2\3\1\64\1\27\1\65\1\73\6\4\1\23\2\4"+
    "\1\0\1\26\4\3\4\26\1\3\2\26\1\4\7\26\1\3\4\26\1\3\5\26\17\3\1\26\2\3\4\26"+
    "\4\3\16\26\5\3\7\26\1\3\1\26\1\3\1\26\5\3\1\26\2\3\2\26\4\3\10\26\1\3\1\26"+
    "\3\3\1\26\1\3\1\26\4\3\1\26\13\3\1\26\3\3\1\26\5\4\2\26\6\3\1\26\7\3\1\26"+
    "\1\3\15\26\1\3\1\26\15\4\1\26\1\4\1\26\2\4\1\26\2\4\1\26\1\4\3\3\5\26\5\4"+
    "\6\26\1\3\4\26\3\4\5\26\3\3\7\4\4\26\2\3\1\4\13\3\1\26\1\3\7\4\2\3\2\4\1\26"+
    "\4\4\2\3\2\4\3\3\2\26\1\3\7\26\1\4\1\3\1\4\6\3\3\4\2\26\11\3\3\4\1\3\6\26"+
    "\2\4\6\3\4\4\2\3\2\26\2\4\1\3\11\4\1\3\3\4\1\3\5\4\2\26\1\3\3\4\4\26\1\3\1"+
    "\26\6\3\4\26\13\4\1\26\4\4\6\3\3\4\1\3\2\4\1\3\7\4\2\3\2\4\2\26\2\4\1\26\3"+
    "\4\1\26\10\3\2\26\2\3\2\26\6\3\1\26\1\3\3\26\4\3\2\26\1\4\1\3\7\4\2\26\2\4"+
    "\2\26\3\4\1\3\5\26\2\3\1\26\5\3\4\26\3\3\4\26\2\3\1\26\2\3\1\26\2\3\1\26\2"+
    "\3\2\26\1\4\1\26\5\4\4\26\2\4\2\26\3\4\3\26\1\4\7\26\4\3\1\26\1\3\7\26\4\4"+
    "\3\3\1\4\2\26\1\3\1\26\2\3\1\26\3\3\2\4\1\26\3\4\2\26\1\3\11\26\1\4\1\3\1"+
    "\26\6\3\3\26\3\3\1\26\4\3\3\26\2\3\1\26\1\3\1\26\2\3\3\26\2\3\3\26\2\3\4\26"+
    "\5\4\3\26\3\4\1\26\4\4\2\26\1\3\6\26\1\4\4\3\1\26\5\3\3\26\1\3\7\4\1\26\2"+
    "\4\5\26\2\4\3\26\2\4\1\26\3\3\1\26\2\3\5\26\3\3\2\26\1\3\3\4\1\26\4\4\1\3"+
    "\1\26\4\3\1\26\1\3\4\26\1\4\4\26\6\4\1\26\1\4\3\26\2\4\4\26\1\3\1\4\2\3\7"+
    "\4\4\26\10\3\3\4\7\26\2\3\1\26\1\3\2\26\2\3\1\26\1\3\2\26\1\3\6\26\4\3\1\26"+
    "\3\3\1\26\1\3\1\26\1\3\2\26\2\3\1\26\3\3\2\4\1\26\2\4\1\3\2\26\5\3\1\26\1"+
    "\3\1\26\6\4\2\26\2\4\2\26\4\3\5\26\1\4\1\26\1\4\1\26\1\4\4\26\2\4\5\3\3\4"+
    "\6\26\1\4\1\26\7\4\1\3\2\4\4\3\3\4\1\3\3\4\2\3\7\4\3\3\4\4\5\3\14\4\1\3\1"+
    "\4\3\3\1\26\7\3\2\26\3\4\1\0\11\3\3\4\3\26\2\3\2\4\4\26\1\3\1\26\2\4\4\26"+
    "\4\3\10\4\3\26\1\3\3\26\2\3\1\4\5\26\3\4\2\26\1\3\1\4\1\3\5\26\6\3\2\26\5"+
    "\4\3\3\3\26\10\4\5\3\2\4\3\26\3\3\3\4\1\26\5\4\4\3\1\4\4\3\3\4\2\3\2\26\1"+
    "\3\1\26\1\3\1\26\1\3\1\26\1\3\2\26\3\3\1\26\6\3\2\26\2\3\13\0\5\4\2\21\5\4"+
    "\1\0\4\26\1\3\12\26\1\0\2\26\6\4\1\26\1\4\3\26\4\4\11\26\1\3\4\26\1\3\1\26"+
    "\5\3\2\26\1\3\1\26\4\3\1\26\3\3\2\26\4\3\5\26\5\3\4\26\1\3\4\26\4\3\3\4\2"+
    "\3\4\26\1\0\4\26\3\3\1\26\2\4\2\26\3\3\6\4\1\26\2\3\2\26\4\3\1\26\2\3\1\4"+
    "\3\3\1\4\4\3\1\4\10\3\2\4\4\26\1\3\1\4\4\26\1\4\5\3\2\4\3\26\3\3\4\26\3\3"+
    "\2\4\2\26\6\3\1\26\3\4\1\26\2\4\5\26\5\3\5\26\1\3\1\4\3\3\1\26\2\3\1\26\7"+
    "\3\2\26\1\4\6\26\2\3\2\26\3\3\3\26\2\3\3\26\2\3\2\26\3\4\4\26\3\3\1\26\2\3"+
    "\1\26\1\3\5\26\1\4\2\26\1\3\3\26\1\3\2\26\2\3\3\4\1\26\2\4\1\26\3\4\2\26\1"+
    "\4\2\26\1\4\4\3\10\26\5\4\3\26\6\4\2\26\3\4\2\26\4\4\4\26\3\4\5\26\1\3\2\26"+
    "\2\3\2\26\4\3\1\26\4\3\1\26\1\3\1\26\6\3\2\26\5\3\1\26\4\3\1\26\4\3\2\26\2"+
    "\4\1\26\1\3\1\26\1\3\5\26\1\3\1\26\1\3\1\26\3\3\1\26\3\3\1\26\3\3");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\3\1\5\1\3"+
    "\1\4\1\6\1\7\1\10\1\11\1\12\1\13\12\3"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\6\3\2\4\2\3\1\0\1\4\1\36"+
    "\1\37\1\11\1\0\1\40\1\41\6\3\1\42\1\43"+
    "\1\3\1\44\3\3\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\7\3\1\0\1\4\2\3\1\4\1\0\5\3"+
    "\1\53\7\3\1\54\12\3\1\4\3\0\3\3\1\55"+
    "\14\3\1\56\1\57\1\3\1\60\1\61\1\3\1\4"+
    "\1\62\1\3\1\63\2\3\1\64\2\3\1\65\1\3"+
    "\1\66\5\3\1\67\1\4\1\70\2\3\1\71\1\72"+
    "\1\73\1\74\1\3\1\75\3\3\1\76\3\3\1\77"+
    "\3\3\1\100\1\3\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\111"+
    "\0\u01ff\0\u0248\0\u0291\0\u02da\0\111\0\u0323\0\u036c\0\u03b5"+
    "\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd"+
    "\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\111\0\111"+
    "\0\111\0\111\0\111\0\111\0\111\0\111\0\111\0\111"+
    "\0\111\0\111\0\111\0\111\0\u07fc\0\u0845\0\u088e\0\u08d7"+
    "\0\u0920\0\111\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0291"+
    "\0\u0ad6\0\u0b1f\0\111\0\u0b68\0\111\0\111\0\u0bb1\0\u0bfa"+
    "\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\333"+
    "\0\u0e42\0\u0e8b\0\u0ed4\0\111\0\111\0\111\0\111\0\111"+
    "\0\111\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3"+
    "\0\u0291\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2"+
    "\0\u131b\0\u1364\0\u13ad\0\333\0\u13f6\0\u143f\0\u1488\0\u14d1"+
    "\0\u151a\0\u1563\0\u15ac\0\333\0\u15f5\0\u163e\0\u1687\0\u16d0"+
    "\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886\0\u18cf\0\u1918"+
    "\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\333\0\u1ace\0\u1b17"+
    "\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f"+
    "\0\u1da8\0\u1df1\0\333\0\333\0\u1e3a\0\333\0\333\0\u1e83"+
    "\0\u1ecc\0\333\0\u1f15\0\333\0\u1f5e\0\u1fa7\0\333\0\u1ff0"+
    "\0\u2039\0\333\0\u2082\0\333\0\u20cb\0\u2114\0\u215d\0\u21a6"+
    "\0\u21ef\0\333\0\u2238\0\333\0\u2281\0\u22ca\0\333\0\333"+
    "\0\333\0\333\0\u2313\0\333\0\u235c\0\u23a5\0\u23ee\0\333"+
    "\0\u2437\0\u2480\0\u24c9\0\333\0\u2512\0\u255b\0\u25a4\0\333"+
    "\0\u25ed\0\333\0\333";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\4\1\6\1\4"+
    "\1\7\1\10\1\11\1\12\1\4\1\13\1\14\1\15"+
    "\1\2\1\3\1\2\1\16\2\2\1\17\1\20\1\21"+
    "\1\22\1\23\5\4\1\24\1\25\1\26\1\27\1\30"+
    "\2\4\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\4\1\60\7\4\1\61\112\0\2\3\17\0\1\3"+
    "\71\0\7\4\1\0\3\4\5\0\1\4\5\0\21\4"+
    "\22\0\15\4\5\0\1\6\1\62\1\6\1\0\1\63"+
    "\2\0\1\6\1\0\1\64\14\0\1\63\62\0\1\6"+
    "\1\0\1\6\1\0\1\63\2\0\1\6\1\0\1\64"+
    "\14\0\1\63\60\0\7\4\1\0\3\4\5\0\1\4"+
    "\5\0\21\4\22\0\12\4\1\65\2\4\3\0\7\4"+
    "\1\0\3\4\5\0\1\4\5\0\1\4\1\66\17\4"+
    "\22\0\15\4\5\0\1\6\1\0\1\6\1\0\1\63"+
    "\2\0\1\6\1\67\1\64\14\0\1\63\62\0\1\70"+
    "\1\0\1\70\4\0\1\70\113\0\1\71\1\72\70\0"+
    "\24\16\1\73\1\74\63\16\27\0\1\75\111\0\1\76"+
    "\63\0\7\4\1\0\3\4\5\0\1\4\5\0\1\4"+
    "\1\77\17\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\2\4\1\100\16\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\7\4"+
    "\1\101\6\4\1\102\2\4\22\0\15\4\3\0\7\4"+
    "\1\0\3\4\5\0\1\4\5\0\11\4\1\103\7\4"+
    "\22\0\15\4\3\0\7\4\1\0\3\4\5\0\1\4"+
    "\5\0\6\4\1\104\12\4\22\0\15\4\3\0\7\4"+
    "\1\0\3\4\5\0\1\4\5\0\7\4\1\105\7\4"+
    "\1\106\1\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\2\4\1\107\6\4\1\110\7\4"+
    "\22\0\15\4\3\0\7\4\1\0\3\4\5\0\1\4"+
    "\5\0\15\4\1\111\3\4\22\0\15\4\3\0\7\4"+
    "\1\0\3\4\5\0\1\4\5\0\11\4\1\112\7\4"+
    "\22\0\15\4\3\0\7\4\1\0\3\4\5\0\1\4"+
    "\5\0\5\4\1\113\13\4\22\0\15\4\53\0\1\114"+
    "\110\0\1\115\110\0\1\116\1\117\107\0\1\120\1\0"+
    "\1\121\36\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\6\4\1\122\6\4\1\123\3\4\22\0\15\4\3\0"+
    "\7\4\1\0\3\4\5\0\1\4\5\0\1\4\1\124"+
    "\1\4\1\125\15\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\3\4\1\126\15\4\22\0"+
    "\15\4\3\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\21\4\22\0\5\4\1\127\7\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\11\4\1\130\7\4\22\0"+
    "\15\4\5\0\1\70\1\0\1\70\2\0\1\131\1\0"+
    "\1\70\41\0\1\131\37\0\1\132\1\0\1\132\4\0"+
    "\1\132\77\0\3\4\1\133\3\4\1\0\3\4\5\0"+
    "\1\4\5\0\21\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\3\4\1\134\15\4\22\0"+
    "\15\4\5\0\5\135\2\0\1\135\14\0\1\135\1\0"+
    "\2\135\4\0\1\135\2\0\1\135\3\0\1\135\27\0"+
    "\1\135\3\0\1\135\4\0\1\71\1\0\17\71\3\0"+
    "\65\71\111\72\3\0\16\136\3\0\65\136\3\0\7\4"+
    "\1\0\3\4\5\0\1\4\5\0\2\4\1\137\16\4"+
    "\22\0\15\4\3\0\7\4\1\0\3\4\5\0\1\4"+
    "\5\0\5\4\1\140\13\4\22\0\15\4\3\0\7\4"+
    "\1\0\3\4\5\0\1\4\5\0\13\4\1\141\5\4"+
    "\22\0\15\4\3\0\7\4\1\0\3\4\5\0\1\4"+
    "\5\0\20\4\1\142\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\7\4\1\143\11\4\22\0"+
    "\15\4\3\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\5\4\1\144\13\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\10\4\1\145\1\146\4\4"+
    "\1\147\2\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\7\4\1\150\3\4\1\151\5\4"+
    "\22\0\15\4\3\0\7\4\1\0\3\4\5\0\1\4"+
    "\5\0\17\4\1\152\1\4\22\0\15\4\3\0\7\4"+
    "\1\0\3\4\5\0\1\4\5\0\12\4\1\153\6\4"+
    "\22\0\15\4\3\0\7\4\1\0\3\4\5\0\1\4"+
    "\5\0\1\4\1\154\17\4\22\0\15\4\3\0\7\4"+
    "\1\0\3\4\5\0\1\4\5\0\1\4\1\155\17\4"+
    "\22\0\15\4\3\0\7\4\1\0\3\4\5\0\1\4"+
    "\5\0\1\156\20\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\3\4\1\157\15\4\22\0"+
    "\15\4\3\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\11\4\1\160\7\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\20\4\1\161\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\21\4"+
    "\22\0\3\4\1\162\11\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\21\4\22\0\1\4\1\163\13\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\12\4"+
    "\1\164\6\4\22\0\15\4\5\0\1\132\1\0\1\132"+
    "\1\0\1\63\2\0\1\132\16\0\1\63\60\0\7\4"+
    "\1\0\3\4\5\0\1\4\5\0\21\4\22\0\4\4"+
    "\1\165\10\4\3\0\7\4\1\0\3\4\5\0\1\4"+
    "\5\0\21\4\22\0\3\4\1\166\11\4\5\0\4\135"+
    "\1\167\1\0\1\170\1\135\1\0\1\171\12\0\1\135"+
    "\1\0\1\167\1\135\4\0\1\135\2\0\1\135\3\0"+
    "\1\135\24\0\1\170\2\0\1\135\3\0\1\135\31\0"+
    "\1\172\66\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\3\4\1\173\15\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\6\4\1\174\12\4\22\0"+
    "\15\4\3\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\12\4\1\175\6\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\2\4\1\176\16\4\22\0"+
    "\15\4\3\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\5\4\1\177\13\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\16\4\1\200\2\4\22\0"+
    "\15\4\3\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\6\4\1\201\12\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\12\4\1\202\6\4\22\0"+
    "\15\4\3\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\13\4\1\203\5\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\2\4\1\204\16\4\22\0"+
    "\15\4\3\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\12\4\1\205\6\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\16\4\1\206\2\4\22\0"+
    "\15\4\3\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\6\4\1\207\12\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\21\4\22\0\1\210\14\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\13\4"+
    "\1\211\5\4\22\0\15\4\3\0\7\4\1\0\1\212"+
    "\2\4\5\0\1\4\5\0\21\4\22\0\15\4\3\0"+
    "\7\4\1\0\3\4\5\0\1\4\5\0\20\4\1\213"+
    "\22\0\15\4\3\0\7\4\1\0\3\4\5\0\1\4"+
    "\5\0\20\4\1\214\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\21\4\22\0\6\4\1\215"+
    "\6\4\3\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\13\4\1\216\5\4\22\0\15\4\3\0\7\4\1\0"+
    "\3\4\5\0\1\4\5\0\21\4\22\0\5\4\1\217"+
    "\7\4\3\0\7\4\1\0\3\4\5\0\1\4\5\0"+
    "\21\4\22\0\13\4\1\220\1\4\5\0\4\135\1\167"+
    "\1\131\1\170\1\135\1\0\1\171\12\0\1\135\1\0"+
    "\1\167\1\135\4\0\1\135\2\0\1\135\3\0\1\135"+
    "\5\0\1\131\16\0\1\170\2\0\1\135\3\0\1\135"+
    "\16\0\1\131\43\0\1\131\37\0\5\221\2\0\1\221"+
    "\14\0\1\221\1\0\2\221\4\0\1\221\2\0\1\221"+
    "\3\0\1\221\27\0\1\221\3\0\1\221\5\0\1\16"+
    "\112\0\7\4\1\0\3\4\5\0\1\4\5\0\4\4"+
    "\1\222\14\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\1\4\1\223\17\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\17\4"+
    "\1\224\1\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\12\4\1\225\6\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\6\4"+
    "\1\226\12\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\5\4\1\227\13\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\7\4"+
    "\1\230\11\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\2\4\1\231\16\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\17\4"+
    "\1\232\1\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\7\4\1\233\11\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\2\4"+
    "\1\234\16\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\10\4\1\235\10\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\15\4"+
    "\1\236\3\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\2\4\1\237\16\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\2\4"+
    "\1\240\16\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\21\4\22\0\7\4\1\241\5\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\3\4"+
    "\1\242\15\4\22\0\15\4\5\0\4\221\1\243\1\0"+
    "\1\170\1\221\14\0\1\221\1\0\1\243\1\221\4\0"+
    "\1\221\2\0\1\221\3\0\1\221\24\0\1\170\2\0"+
    "\1\221\3\0\1\221\7\0\7\4\1\0\3\4\5\0"+
    "\1\4\5\0\7\4\1\244\11\4\22\0\15\4\3\0"+
    "\7\4\1\0\3\4\5\0\1\4\5\0\7\4\1\245"+
    "\11\4\22\0\15\4\3\0\7\4\1\0\3\4\5\0"+
    "\1\4\5\0\13\4\1\246\5\4\22\0\15\4\3\0"+
    "\7\4\1\0\3\4\5\0\1\4\5\0\2\4\1\247"+
    "\16\4\22\0\15\4\3\0\7\4\1\0\3\4\5\0"+
    "\1\4\5\0\17\4\1\250\1\4\22\0\15\4\3\0"+
    "\7\4\1\0\3\4\5\0\1\4\5\0\2\4\1\251"+
    "\16\4\22\0\15\4\3\0\7\4\1\0\3\4\5\0"+
    "\1\4\5\0\5\4\1\252\13\4\22\0\15\4\3\0"+
    "\7\4\1\0\3\4\5\0\1\4\5\0\3\4\1\253"+
    "\15\4\22\0\15\4\3\0\7\4\1\0\3\4\5\0"+
    "\1\4\5\0\1\4\1\254\17\4\22\0\15\4\3\0"+
    "\7\4\1\0\3\4\5\0\1\4\5\0\1\4\1\255"+
    "\17\4\22\0\15\4\3\0\7\4\1\0\3\4\5\0"+
    "\1\4\5\0\21\4\22\0\5\4\1\256\7\4\5\0"+
    "\4\221\1\243\1\131\1\170\1\221\14\0\1\221\1\0"+
    "\1\243\1\221\4\0\1\221\2\0\1\221\3\0\1\221"+
    "\5\0\1\131\16\0\1\170\2\0\1\221\3\0\1\221"+
    "\7\0\7\4\1\0\3\4\5\0\1\4\5\0\6\4"+
    "\1\257\12\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\2\4\1\260\16\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\13\4"+
    "\1\261\5\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\5\4\1\262\13\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\21\4"+
    "\22\0\6\4\1\263\6\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\2\4\1\264\16\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\2\4"+
    "\1\265\16\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\12\4\1\266\6\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\21\4"+
    "\22\0\10\4\1\267\4\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\1\4\1\270\17\4\22\0\15\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\2\4"+
    "\1\271\16\4\22\0\15\4\3\0\7\4\1\0\3\4"+
    "\5\0\1\4\5\0\21\4\22\0\11\4\1\272\3\4"+
    "\3\0\7\4\1\0\3\4\5\0\1\4\5\0\20\4"+
    "\1\273\22\0\15\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9782];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\4\1\1\11\21\1\16\11"+
    "\5\1\1\11\4\1\1\0\3\1\1\11\1\0\2\11"+
    "\15\1\6\11\7\1\1\0\4\1\1\0\31\1\3\0"+
    "\101\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public ShaderLexer()
    {
        this(null);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ShaderLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 67: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 3: 
            { return ID;
            } 
            // fall through
          case 69: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 70: break;
          case 5: 
            { return PLUS;
            } 
            // fall through
          case 71: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 72: break;
          case 7: 
            { return DIV;
            } 
            // fall through
          case 73: break;
          case 8: 
            { return MULT;
            } 
            // fall through
          case 74: break;
          case 9: 
            { return STRING;
            } 
            // fall through
          case 75: break;
          case 10: 
            { return BIT_OR;
            } 
            // fall through
          case 76: break;
          case 11: 
            { return BIT_AND;
            } 
            // fall through
          case 77: break;
          case 12: 
            { return NOT;
            } 
            // fall through
          case 78: break;
          case 13: 
            { return ASSIGN;
            } 
            // fall through
          case 79: break;
          case 14: 
            { return GT;
            } 
            // fall through
          case 80: break;
          case 15: 
            { return LT;
            } 
            // fall through
          case 81: break;
          case 16: 
            { return MINUS;
            } 
            // fall through
          case 82: break;
          case 17: 
            { return MOD;
            } 
            // fall through
          case 83: break;
          case 18: 
            { return LPAREN;
            } 
            // fall through
          case 84: break;
          case 19: 
            { return RPAREN;
            } 
            // fall through
          case 85: break;
          case 20: 
            { return LBRACKET;
            } 
            // fall through
          case 86: break;
          case 21: 
            { return RBRACKET;
            } 
            // fall through
          case 87: break;
          case 22: 
            { return LCURLY;
            } 
            // fall through
          case 88: break;
          case 23: 
            { return RCURLY;
            } 
            // fall through
          case 89: break;
          case 24: 
            { return GETN;
            } 
            // fall through
          case 90: break;
          case 25: 
            { return COMMA;
            } 
            // fall through
          case 91: break;
          case 26: 
            { return SEMI;
            } 
            // fall through
          case 92: break;
          case 27: 
            { return COLON;
            } 
            // fall through
          case 93: break;
          case 28: 
            { return EXP;
            } 
            // fall through
          case 94: break;
          case 29: 
            { return BIT_TILDE;
            } 
            // fall through
          case 95: break;
          case 30: 
            { return SHORT_COMMENT;
            } 
            // fall through
          case 96: break;
          case 31: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 97: break;
          case 32: 
            { return OR;
            } 
            // fall through
          case 98: break;
          case 33: 
            { return AND;
            } 
            // fall through
          case 99: break;
          case 34: 
            { return IN;
            } 
            // fall through
          case 100: break;
          case 35: 
            { return IF;
            } 
            // fall through
          case 101: break;
          case 36: 
            { return DO;
            } 
            // fall through
          case 102: break;
          case 37: 
            { return NE;
            } 
            // fall through
          case 103: break;
          case 38: 
            { return EQ;
            } 
            // fall through
          case 104: break;
          case 39: 
            { return GE;
            } 
            // fall through
          case 105: break;
          case 40: 
            { return BIT_RTRT;
            } 
            // fall through
          case 106: break;
          case 41: 
            { return LE;
            } 
            // fall through
          case 107: break;
          case 42: 
            { return BIT_LTLT;
            } 
            // fall through
          case 108: break;
          case 43: 
            { return OUT;
            } 
            // fall through
          case 109: break;
          case 44: 
            { return FOR;
            } 
            // fall through
          case 110: break;
          case 45: 
            { return ELSE;
            } 
            // fall through
          case 111: break;
          case 46: 
            { return PASS;
            } 
            // fall through
          case 112: break;
          case 47: 
            { return TAGS;
            } 
            // fall through
          case 113: break;
          case 48: 
            { return VOID;
            } 
            // fall through
          case 114: break;
          case 49: 
            { return ENDCG;
            } 
            // fall through
          case 115: break;
          case 50: 
            { return BREAK;
            } 
            // fall through
          case 116: break;
          case 51: 
            { return ENDIF;
            } 
            // fall through
          case 117: break;
          case 52: 
            { return INOUT;
            } 
            // fall through
          case 118: break;
          case 53: 
            { return IFDEF;
            } 
            // fall through
          case 119: break;
          case 54: 
            { return WHILE;
            } 
            // fall through
          case 120: break;
          case 55: 
            { return PRAGMA;
            } 
            // fall through
          case 121: break;
          case 56: 
            { return RETURN;
            } 
            // fall through
          case 122: break;
          case 57: 
            { return INLINE;
            } 
            // fall through
          case 123: break;
          case 58: 
            { return IFNDEF;
            } 
            // fall through
          case 124: break;
          case 59: 
            { return DEFINE;
            } 
            // fall through
          case 125: break;
          case 60: 
            { return STRUCT;
            } 
            // fall through
          case 126: break;
          case 61: 
            { return SHADER;
            } 
            // fall through
          case 127: break;
          case 62: 
            { return INCLUDE;
            } 
            // fall through
          case 128: break;
          case 63: 
            { return CONTINUE;
            } 
            // fall through
          case 129: break;
          case 64: 
            { return SUBSHADER;
            } 
            // fall through
          case 130: break;
          case 65: 
            { return CGPROGRAM;
            } 
            // fall through
          case 131: break;
          case 66: 
            { return PROPERTIES;
            } 
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
